一个变量之后加？表示这个变量可为空   加！！表示保证不会为空
Any  关键字

Kotlin 中没有基础数据类型，只有封装的数字类型，你每定义的一个变量，其实 Kotlin 帮你封装了一个对象，这样可以保证不会出现空指针。
数字类型也一样，所有在比较两个数字的时候，就有比较数据大小和比较两个对象是否相同的区别了。
在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。

位操作符
    shl(bits) – 左移位 (Java’s <<)
    shr(bits) – 右移位 (Java’s >>)
    ushr(bits) – 无符号右移位 (Java’s >>>)
    and(bits) – 与
    or(bits) – 或
    xor(bits) – 异或
    inv() – 反向

数组的创建
    //[1,2,3]
    val a = arrayOf(1, 2, 3)
    //[0,2,4]
    val b = Array(3, { i -> (i * 2) })

字符串
    kotlin支持用三个双引号包括的多行字符串
        val text = """
            |多行字符串
            |菜鸟教程
            |多行字符串
            |Runoob
            """.trimMargin()  如此可去掉两边多余空白
            默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(">")。

kotlin 支持 if 语句会有值 比如
    val max = if (a > b) {
        a
    } else {
        b
    }

when表达式
    when 将它的参数和所有的分支条件顺序比较，直到某个分支满足条件。
    when 既可以被当做表达式使用也可以被当做语句使用。如果它被当做表达式，
    符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。

同样支持  while  和  do .. while

break continue return 跳转  我们可以声明标签限制  任意字符 + @ 然后在需要的地方  break @ + 任意字符
    或者可以直接 break @ + 循环名或函数名 ，return@a 1 意为"从标签 @a 返回 1"，而不是"返回一个标签标注的表达式 (@a 1)"。